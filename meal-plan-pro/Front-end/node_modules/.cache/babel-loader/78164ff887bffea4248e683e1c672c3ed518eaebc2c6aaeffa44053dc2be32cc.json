{"ast":null,"code":"/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\n(function (global) {\n  // Passing in seed will seed this Noise instance\n  function Noise(seed) {\n    function Grad(x, y, z) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n    }\n    Grad.prototype.dot2 = function (x, y) {\n      return this.x * x + this.y * y;\n    };\n    Grad.prototype.dot3 = function (x, y, z) {\n      return this.x * x + this.y * y + this.z * z;\n    };\n    this.grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\n    this.p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];\n    // To remove the need for index wrapping, double the permutation table length\n    this.perm = new Array(512);\n    this.gradP = new Array(512);\n    this.seed(seed || 0);\n  }\n\n  // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n  Noise.prototype.seed = function (seed) {\n    if (seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n    seed = Math.floor(seed);\n    if (seed < 256) {\n      seed |= seed << 8;\n    }\n    var p = this.p;\n    for (var i = 0; i < 256; i++) {\n      var v;\n      if (i & 1) {\n        v = p[i] ^ seed & 255;\n      } else {\n        v = p[i] ^ seed >> 8 & 255;\n      }\n      var perm = this.perm;\n      var gradP = this.gradP;\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = this.grad3[v % 12];\n    }\n  };\n\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n  var F2 = 0.5 * (Math.sqrt(3) - 1);\n  var G2 = (3 - Math.sqrt(3)) / 6;\n  var F3 = 1 / 3;\n  var G3 = 1 / 6;\n\n  // 2D simplex noise\n  Noise.prototype.simplex2 = function (xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin + yin) * F2; // Hairy factor for 2D\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var t = (i + j) * G2;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin - j + t;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if (x0 > y0) {\n      // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1 = 1;\n      j1 = 0;\n    } else {\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1 = 0;\n      j1 = 1;\n    }\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n    var y2 = y0 - 1 + 2 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    i &= 255;\n    j &= 255;\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var gi0 = gradP[i + perm[j]];\n    var gi1 = gradP[i + i1 + perm[j + j1]];\n    var gi2 = gradP[i + 1 + perm[j + 1]];\n    // Calculate the contribution from the three corners\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70 * (n0 + n1 + n2);\n  };\n\n  // 3D simplex noise\n  Noise.prototype.simplex3 = function (xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin + yin + zin) * F3; // Hairy factor for 2D\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var k = Math.floor(zin + s);\n    var t = (i + j + k) * G3;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin - j + t;\n    var z0 = zin - k + t;\n\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      }\n    } else {\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      }\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3;\n\n    // Work out the hashed gradient indices of the four simplex corners\n    i &= 255;\n    j &= 255;\n    k &= 255;\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var gi0 = gradP[i + perm[j + perm[k]]];\n    var gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\n    var gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\n    var gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]];\n\n    // Calculate the contribution from the four corners\n    var t0 = 0.5 - x0 * x0 - y0 * y0 - z0 * z0;\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1 * x1 - y1 * y1 - z1 * z1;\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n    var t2 = 0.5 - x2 * x2 - y2 * y2 - z2 * z2;\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n    var t3 = 0.5 - x3 * x3 - y3 * y3 - z3 * z3;\n    if (t3 < 0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 32 * (n0 + n1 + n2 + n3);\n  };\n\n  // ##### Perlin noise stuff\n\n  function fade(t) {\n    return t * t * t * (t * (t * 6 - 15) + 10);\n  }\n  function lerp(a, b, t) {\n    return (1 - t) * a + t * b;\n  }\n\n  // 2D Perlin Noise\n  Noise.prototype.perlin2 = function (x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n      Y = Math.floor(y);\n    // Get relative xy coordinates of point within that cell\n    x = x - X;\n    y = y - Y;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255;\n    Y = Y & 255;\n\n    // Calculate noise contributions from each of the four corners\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var n00 = gradP[X + perm[Y]].dot2(x, y);\n    var n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\n    var n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\n    var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1);\n\n    // Compute the fade curve value for x\n    var u = fade(x);\n\n    // Interpolate the four results\n    return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\n  };\n\n  // 3D Perlin Noise\n  Noise.prototype.perlin3 = function (x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n      Y = Math.floor(y),\n      Z = Math.floor(z);\n    // Get relative xyz coordinates of point within that cell\n    x = x - X;\n    y = y - Y;\n    z = z - Z;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255;\n    Y = Y & 255;\n    Z = Z & 255;\n\n    // Calculate noise contributions from each of the eight corners\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\n    var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\n    var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\n    var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\n    var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\n    var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\n    var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\n    var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1);\n\n    // Compute the fade curve value for x, y, z\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z);\n\n    // Interpolate\n    return lerp(lerp(lerp(n000, n100, u), lerp(n001, n101, u), w), lerp(lerp(n010, n110, u), lerp(n011, n111, u), w), v);\n  };\n  global.Noise = Noise;\n})(typeof module === \"undefined\" ? this : module.exports);","map":{"version":3,"names":["global","Noise","seed","Grad","x","y","z","prototype","dot2","dot3","grad3","p","perm","Array","gradP","Math","floor","i","v","F2","sqrt","G2","F3","G3","simplex2","xin","yin","n0","n1","n2","s","j","t","x0","y0","i1","j1","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","simplex3","zin","n3","k","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","gi3","t3","fade","lerp","a","b","perlin2","X","Y","n00","n01","n10","n11","u","perlin3","Z","n000","n001","n010","n011","n100","n101","n110","n111","w","module","exports"],"sources":["C:/Users/Tenka/Desktop/Cloud-Application-Architecture-Spring-2024-main/meal-plan-pro/Front-end/node_modules/noisejs/index.js"],"sourcesContent":["/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\n(function(global){\n\n  // Passing in seed will seed this Noise instance\n  function Noise(seed) {\n    function Grad(x, y, z) {\n      this.x = x; this.y = y; this.z = z;\n    }\n\n    Grad.prototype.dot2 = function(x, y) {\n      return this.x*x + this.y*y;\n    };\n\n    Grad.prototype.dot3 = function(x, y, z) {\n      return this.x*x + this.y*y + this.z*z;\n    };\n\n    this.grad3 = [new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),\n                 new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),\n                 new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)];\n\n    this.p = [151,160,137,91,90,15,\n    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];\n    // To remove the need for index wrapping, double the permutation table length\n    this.perm = new Array(512);\n    this.gradP = new Array(512);\n\n    this.seed(seed || 0);\n  }\n\n  // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n  Noise.prototype.seed = function(seed) {\n    if(seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n\n    seed = Math.floor(seed);\n    if(seed < 256) {\n      seed |= seed << 8;\n    }\n\n    var p = this.p;\n    for(var i = 0; i < 256; i++) {\n      var v;\n      if (i & 1) {\n        v = p[i] ^ (seed & 255);\n      } else {\n        v = p[i] ^ ((seed>>8) & 255);\n      }\n\n      var perm = this.perm;\n      var gradP = this.gradP;\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = this.grad3[v % 12];\n    }\n  };\n\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n  var F2 = 0.5*(Math.sqrt(3)-1);\n  var G2 = (3-Math.sqrt(3))/6;\n\n  var F3 = 1/3;\n  var G3 = 1/6;\n\n  // 2D simplex noise\n  Noise.prototype.simplex2 = function(xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin+yin)*F2; // Hairy factor for 2D\n    var i = Math.floor(xin+s);\n    var j = Math.floor(yin+s);\n    var t = (i+j)*G2;\n    var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin-j+t;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if(x0>y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1=1; j1=0;\n    } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1=0; j1=1;\n    }\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n    var y2 = y0 - 1 + 2 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    i &= 255;\n    j &= 255;\n\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var gi0 = gradP[i+perm[j]];\n    var gi1 = gradP[i+i1+perm[j+j1]];\n    var gi2 = gradP[i+1+perm[j+1]];\n    // Calculate the contribution from the three corners\n    var t0 = 0.5 - x0*x0-y0*y0;\n    if(t0<0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1*x1-y1*y1;\n    if(t1<0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n    var t2 = 0.5 - x2*x2-y2*y2;\n    if(t2<0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70 * (n0 + n1 + n2);\n  };\n\n  // 3D simplex noise\n  Noise.prototype.simplex3 = function(xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin+yin+zin)*F3; // Hairy factor for 2D\n    var i = Math.floor(xin+s);\n    var j = Math.floor(yin+s);\n    var k = Math.floor(zin+s);\n\n    var t = (i+j+k)*G3;\n    var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin-j+t;\n    var z0 = zin-k+t;\n\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n    if(x0 >= y0) {\n      if(y0 >= z0)      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }\n      else if(x0 >= z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }\n      else              { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }\n    } else {\n      if(y0 < z0)      { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }\n      else if(x0 < z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }\n      else             { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3;\n\n    // Work out the hashed gradient indices of the four simplex corners\n    i &= 255;\n    j &= 255;\n    k &= 255;\n\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var gi0 = gradP[i+   perm[j+   perm[k   ]]];\n    var gi1 = gradP[i+i1+perm[j+j1+perm[k+k1]]];\n    var gi2 = gradP[i+i2+perm[j+j2+perm[k+k2]]];\n    var gi3 = gradP[i+ 1+perm[j+ 1+perm[k+ 1]]];\n\n    // Calculate the contribution from the four corners\n    var t0 = 0.5 - x0*x0-y0*y0-z0*z0;\n    if(t0<0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1*x1-y1*y1-z1*z1;\n    if(t1<0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n    var t2 = 0.5 - x2*x2-y2*y2-z2*z2;\n    if(t2<0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n    var t3 = 0.5 - x3*x3-y3*y3-z3*z3;\n    if(t3<0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 32 * (n0 + n1 + n2 + n3);\n\n  };\n\n  // ##### Perlin noise stuff\n\n  function fade(t) {\n    return t*t*t*(t*(t*6-15)+10);\n  }\n\n  function lerp(a, b, t) {\n    return (1-t)*a + t*b;\n  }\n\n  // 2D Perlin Noise\n  Noise.prototype.perlin2 = function(x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x), Y = Math.floor(y);\n    // Get relative xy coordinates of point within that cell\n    x = x - X; y = y - Y;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255; Y = Y & 255;\n\n    // Calculate noise contributions from each of the four corners\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var n00 = gradP[X+perm[Y]].dot2(x, y);\n    var n01 = gradP[X+perm[Y+1]].dot2(x, y-1);\n    var n10 = gradP[X+1+perm[Y]].dot2(x-1, y);\n    var n11 = gradP[X+1+perm[Y+1]].dot2(x-1, y-1);\n\n    // Compute the fade curve value for x\n    var u = fade(x);\n\n    // Interpolate the four results\n    return lerp(\n        lerp(n00, n10, u),\n        lerp(n01, n11, u),\n       fade(y));\n  };\n\n  // 3D Perlin Noise\n  Noise.prototype.perlin3 = function(x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n    // Get relative xyz coordinates of point within that cell\n    x = x - X; y = y - Y; z = z - Z;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255; Y = Y & 255; Z = Z & 255;\n\n    // Calculate noise contributions from each of the eight corners\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var n000 = gradP[X+  perm[Y+  perm[Z  ]]].dot3(x,   y,     z);\n    var n001 = gradP[X+  perm[Y+  perm[Z+1]]].dot3(x,   y,   z-1);\n    var n010 = gradP[X+  perm[Y+1+perm[Z  ]]].dot3(x,   y-1,   z);\n    var n011 = gradP[X+  perm[Y+1+perm[Z+1]]].dot3(x,   y-1, z-1);\n    var n100 = gradP[X+1+perm[Y+  perm[Z  ]]].dot3(x-1,   y,   z);\n    var n101 = gradP[X+1+perm[Y+  perm[Z+1]]].dot3(x-1,   y, z-1);\n    var n110 = gradP[X+1+perm[Y+1+perm[Z  ]]].dot3(x-1, y-1,   z);\n    var n111 = gradP[X+1+perm[Y+1+perm[Z+1]]].dot3(x-1, y-1, z-1);\n\n    // Compute the fade curve value for x, y, z\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z);\n\n    // Interpolate\n    return lerp(\n        lerp(\n          lerp(n000, n100, u),\n          lerp(n001, n101, u), w),\n        lerp(\n          lerp(n010, n110, u),\n          lerp(n011, n111, u), w),\n       v);\n  };\n\n  global.Noise = Noise;\n\n})(typeof module === \"undefined\" ? this : module.exports);\n"],"mappings":"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,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAE,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC3E,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAE,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC3E,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAC3E,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAE,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAE,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAE,EAAE,EAAC,GAAG,EAAC,CAAC,EAC3E,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAE,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAE,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAC3E,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAE,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAC3E,EAAE,EAAC,GAAG,EAAC,GAAG,EAAE,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAE,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAE,CAAC,EAAC,GAAG,EAAC,GAAG,EAC3E,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,CAAC;IACxE;IACA,IAAI,CAACC,IAAI,GAAG,IAAIC,KAAK,CAAC,GAAG,CAAC;IAC1B,IAAI,CAACC,KAAK,GAAG,IAAID,KAAK,CAAC,GAAG,CAAC;IAE3B,IAAI,CAACX,IAAI,CAACA,IAAI,IAAI,CAAC,CAAC;EACtB;;EAEA;EACA;EACAD,KAAK,CAACM,SAAS,CAACL,IAAI,GAAG,UAASA,IAAI,EAAE;IACpC,IAAGA,IAAI,GAAG,CAAC,IAAIA,IAAI,GAAG,CAAC,EAAE;MACvB;MACAA,IAAI,IAAI,KAAK;IACf;IAEAA,IAAI,GAAGa,IAAI,CAACC,KAAK,CAACd,IAAI,CAAC;IACvB,IAAGA,IAAI,GAAG,GAAG,EAAE;MACbA,IAAI,IAAIA,IAAI,IAAI,CAAC;IACnB;IAEA,IAAIS,CAAC,GAAG,IAAI,CAACA,CAAC;IACd,KAAI,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;MAC3B,IAAIC,CAAC;MACL,IAAID,CAAC,GAAG,CAAC,EAAE;QACTC,CAAC,GAAGP,CAAC,CAACM,CAAC,CAAC,GAAIf,IAAI,GAAG,GAAI;MACzB,CAAC,MAAM;QACLgB,CAAC,GAAGP,CAAC,CAACM,CAAC,CAAC,GAAKf,IAAI,IAAE,CAAC,GAAI,GAAI;MAC9B;MAEA,IAAIU,IAAI,GAAG,IAAI,CAACA,IAAI;MACpB,IAAIE,KAAK,GAAG,IAAI,CAACA,KAAK;MACtBF,IAAI,CAACK,CAAC,CAAC,GAAGL,IAAI,CAACK,CAAC,GAAG,GAAG,CAAC,GAAGC,CAAC;MAC3BJ,KAAK,CAACG,CAAC,CAAC,GAAGH,KAAK,CAACG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAACP,KAAK,CAACQ,CAAC,GAAG,EAAE,CAAC;IAChD;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;;EAEE;EACA,IAAIC,EAAE,GAAG,GAAG,IAAEJ,IAAI,CAACK,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC;EAC7B,IAAIC,EAAE,GAAG,CAAC,CAAC,GAACN,IAAI,CAACK,IAAI,CAAC,CAAC,CAAC,IAAE,CAAC;EAE3B,IAAIE,EAAE,GAAG,CAAC,GAAC,CAAC;EACZ,IAAIC,EAAE,GAAG,CAAC,GAAC,CAAC;;EAEZ;EACAtB,KAAK,CAACM,SAAS,CAACiB,QAAQ,GAAG,UAASC,GAAG,EAAEC,GAAG,EAAE;IAC5C,IAAIC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,CAAC;IAChB;IACA,IAAIC,CAAC,GAAG,CAACL,GAAG,GAACC,GAAG,IAAEP,EAAE,CAAC,CAAC;IACtB,IAAIF,CAAC,GAAGF,IAAI,CAACC,KAAK,CAACS,GAAG,GAACK,CAAC,CAAC;IACzB,IAAIC,CAAC,GAAGhB,IAAI,CAACC,KAAK,CAACU,GAAG,GAACI,CAAC,CAAC;IACzB,IAAIE,CAAC,GAAG,CAACf,CAAC,GAACc,CAAC,IAAEV,EAAE;IAChB,IAAIY,EAAE,GAAGR,GAAG,GAACR,CAAC,GAACe,CAAC,CAAC,CAAC;IAClB,IAAIE,EAAE,GAAGR,GAAG,GAACK,CAAC,GAACC,CAAC;IAChB;IACA;IACA,IAAIG,EAAE,EAAEC,EAAE,CAAC,CAAC;IACZ,IAAGH,EAAE,GAACC,EAAE,EAAE;MAAE;MACVC,EAAE,GAAC,CAAC;MAAEC,EAAE,GAAC,CAAC;IACZ,CAAC,MAAM;MAAK;MACVD,EAAE,GAAC,CAAC;MAAEC,EAAE,GAAC,CAAC;IACZ;IACA;IACA;IACA;IACA,IAAIC,EAAE,GAAGJ,EAAE,GAAGE,EAAE,GAAGd,EAAE,CAAC,CAAC;IACvB,IAAIiB,EAAE,GAAGJ,EAAE,GAAGE,EAAE,GAAGf,EAAE;IACrB,IAAIkB,EAAE,GAAGN,EAAE,GAAG,CAAC,GAAG,CAAC,GAAGZ,EAAE,CAAC,CAAC;IAC1B,IAAImB,EAAE,GAAGN,EAAE,GAAG,CAAC,GAAG,CAAC,GAAGb,EAAE;IACxB;IACAJ,CAAC,IAAI,GAAG;IACRc,CAAC,IAAI,GAAG;IAER,IAAInB,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAIE,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAI2B,GAAG,GAAG3B,KAAK,CAACG,CAAC,GAACL,IAAI,CAACmB,CAAC,CAAC,CAAC;IAC1B,IAAIW,GAAG,GAAG5B,KAAK,CAACG,CAAC,GAACkB,EAAE,GAACvB,IAAI,CAACmB,CAAC,GAACK,EAAE,CAAC,CAAC;IAChC,IAAIO,GAAG,GAAG7B,KAAK,CAACG,CAAC,GAAC,CAAC,GAACL,IAAI,CAACmB,CAAC,GAAC,CAAC,CAAC,CAAC;IAC9B;IACA,IAAIa,EAAE,GAAG,GAAG,GAAGX,EAAE,GAACA,EAAE,GAACC,EAAE,GAACA,EAAE;IAC1B,IAAGU,EAAE,GAAC,CAAC,EAAE;MACPjB,EAAE,GAAG,CAAC;IACR,CAAC,MAAM;MACLiB,EAAE,IAAIA,EAAE;MACRjB,EAAE,GAAGiB,EAAE,GAAGA,EAAE,GAAGH,GAAG,CAACjC,IAAI,CAACyB,EAAE,EAAEC,EAAE,CAAC,CAAC,CAAE;IACpC;IACA,IAAIW,EAAE,GAAG,GAAG,GAAGR,EAAE,GAACA,EAAE,GAACC,EAAE,GAACA,EAAE;IAC1B,IAAGO,EAAE,GAAC,CAAC,EAAE;MACPjB,EAAE,GAAG,CAAC;IACR,CAAC,MAAM;MACLiB,EAAE,IAAIA,EAAE;MACRjB,EAAE,GAAGiB,EAAE,GAAGA,EAAE,GAAGH,GAAG,CAAClC,IAAI,CAAC6B,EAAE,EAAEC,EAAE,CAAC;IACjC;IACA,IAAIQ,EAAE,GAAG,GAAG,GAAGP,EAAE,GAACA,EAAE,GAACC,EAAE,GAACA,EAAE;IAC1B,IAAGM,EAAE,GAAC,CAAC,EAAE;MACPjB,EAAE,GAAG,CAAC;IACR,CAAC,MAAM;MACLiB,EAAE,IAAIA,EAAE;MACRjB,EAAE,GAAGiB,EAAE,GAAGA,EAAE,GAAGH,GAAG,CAACnC,IAAI,CAAC+B,EAAE,EAAEC,EAAE,CAAC;IACjC;IACA;IACA;IACA,OAAO,EAAE,IAAIb,EAAE,GAAGC,EAAE,GAAGC,EAAE,CAAC;EAC5B,CAAC;;EAED;EACA5B,KAAK,CAACM,SAAS,CAACwC,QAAQ,GAAG,UAAStB,GAAG,EAAEC,GAAG,EAAEsB,GAAG,EAAE;IACjD,IAAIrB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEoB,EAAE,CAAC,CAAC;;IAEpB;IACA,IAAInB,CAAC,GAAG,CAACL,GAAG,GAACC,GAAG,GAACsB,GAAG,IAAE1B,EAAE,CAAC,CAAC;IAC1B,IAAIL,CAAC,GAAGF,IAAI,CAACC,KAAK,CAACS,GAAG,GAACK,CAAC,CAAC;IACzB,IAAIC,CAAC,GAAGhB,IAAI,CAACC,KAAK,CAACU,GAAG,GAACI,CAAC,CAAC;IACzB,IAAIoB,CAAC,GAAGnC,IAAI,CAACC,KAAK,CAACgC,GAAG,GAAClB,CAAC,CAAC;IAEzB,IAAIE,CAAC,GAAG,CAACf,CAAC,GAACc,CAAC,GAACmB,CAAC,IAAE3B,EAAE;IAClB,IAAIU,EAAE,GAAGR,GAAG,GAACR,CAAC,GAACe,CAAC,CAAC,CAAC;IAClB,IAAIE,EAAE,GAAGR,GAAG,GAACK,CAAC,GAACC,CAAC;IAChB,IAAImB,EAAE,GAAGH,GAAG,GAACE,CAAC,GAAClB,CAAC;;IAEhB;IACA;IACA,IAAIG,EAAE,EAAEC,EAAE,EAAEgB,EAAE,CAAC,CAAC;IAChB,IAAIC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,CAAC;IAChB,IAAGtB,EAAE,IAAIC,EAAE,EAAE;MACX,IAAGA,EAAE,IAAIiB,EAAE,EAAO;QAAEhB,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEgB,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;MAAE,CAAC,MACpD,IAAGtB,EAAE,IAAIkB,EAAE,EAAE;QAAEhB,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEgB,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;MAAE,CAAC,MACvC;QAAEpB,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEgB,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;MAAE;IAC1D,CAAC,MAAM;MACL,IAAGrB,EAAE,GAAGiB,EAAE,EAAO;QAAEhB,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEgB,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;MAAE,CAAC,MACnD,IAAGtB,EAAE,GAAGkB,EAAE,EAAE;QAAEhB,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEgB,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;MAAE,CAAC,MACvC;QAAEpB,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEgB,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;QAAEC,EAAE,GAAC,CAAC;MAAE;IACzD;IACA;IACA;IACA;IACA;IACA,IAAIlB,EAAE,GAAGJ,EAAE,GAAGE,EAAE,GAAGZ,EAAE,CAAC,CAAC;IACvB,IAAIe,EAAE,GAAGJ,EAAE,GAAGE,EAAE,GAAGb,EAAE;IACrB,IAAIiC,EAAE,GAAGL,EAAE,GAAGC,EAAE,GAAG7B,EAAE;IAErB,IAAIgB,EAAE,GAAGN,EAAE,GAAGoB,EAAE,GAAG,CAAC,GAAG9B,EAAE,CAAC,CAAC;IAC3B,IAAIiB,EAAE,GAAGN,EAAE,GAAGoB,EAAE,GAAG,CAAC,GAAG/B,EAAE;IACzB,IAAIkC,EAAE,GAAGN,EAAE,GAAGI,EAAE,GAAG,CAAC,GAAGhC,EAAE;IAEzB,IAAImC,EAAE,GAAGzB,EAAE,GAAG,CAAC,GAAG,CAAC,GAAGV,EAAE,CAAC,CAAC;IAC1B,IAAIoC,EAAE,GAAGzB,EAAE,GAAG,CAAC,GAAG,CAAC,GAAGX,EAAE;IACxB,IAAIqC,EAAE,GAAGT,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG5B,EAAE;;IAExB;IACAN,CAAC,IAAI,GAAG;IACRc,CAAC,IAAI,GAAG;IACRmB,CAAC,IAAI,GAAG;IAER,IAAItC,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAIE,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAI2B,GAAG,GAAG3B,KAAK,CAACG,CAAC,GAAIL,IAAI,CAACmB,CAAC,GAAInB,IAAI,CAACsC,CAAC,CAAI,CAAC,CAAC;IAC3C,IAAIR,GAAG,GAAG5B,KAAK,CAACG,CAAC,GAACkB,EAAE,GAACvB,IAAI,CAACmB,CAAC,GAACK,EAAE,GAACxB,IAAI,CAACsC,CAAC,GAACE,EAAE,CAAC,CAAC,CAAC;IAC3C,IAAIT,GAAG,GAAG7B,KAAK,CAACG,CAAC,GAACoC,EAAE,GAACzC,IAAI,CAACmB,CAAC,GAACuB,EAAE,GAAC1C,IAAI,CAACsC,CAAC,GAACK,EAAE,CAAC,CAAC,CAAC;IAC3C,IAAIM,GAAG,GAAG/C,KAAK,CAACG,CAAC,GAAE,CAAC,GAACL,IAAI,CAACmB,CAAC,GAAE,CAAC,GAACnB,IAAI,CAACsC,CAAC,GAAE,CAAC,CAAC,CAAC,CAAC;;IAE3C;IACA,IAAIN,EAAE,GAAG,GAAG,GAAGX,EAAE,GAACA,EAAE,GAACC,EAAE,GAACA,EAAE,GAACiB,EAAE,GAACA,EAAE;IAChC,IAAGP,EAAE,GAAC,CAAC,EAAE;MACPjB,EAAE,GAAG,CAAC;IACR,CAAC,MAAM;MACLiB,EAAE,IAAIA,EAAE;MACRjB,EAAE,GAAGiB,EAAE,GAAGA,EAAE,GAAGH,GAAG,CAAChC,IAAI,CAACwB,EAAE,EAAEC,EAAE,EAAEiB,EAAE,CAAC,CAAC,CAAE;IACxC;IACA,IAAIN,EAAE,GAAG,GAAG,GAAGR,EAAE,GAACA,EAAE,GAACC,EAAE,GAACA,EAAE,GAACkB,EAAE,GAACA,EAAE;IAChC,IAAGX,EAAE,GAAC,CAAC,EAAE;MACPjB,EAAE,GAAG,CAAC;IACR,CAAC,MAAM;MACLiB,EAAE,IAAIA,EAAE;MACRjB,EAAE,GAAGiB,EAAE,GAAGA,EAAE,GAAGH,GAAG,CAACjC,IAAI,CAAC4B,EAAE,EAAEC,EAAE,EAAEkB,EAAE,CAAC;IACrC;IACA,IAAIV,EAAE,GAAG,GAAG,GAAGP,EAAE,GAACA,EAAE,GAACC,EAAE,GAACA,EAAE,GAACiB,EAAE,GAACA,EAAE;IAChC,IAAGX,EAAE,GAAC,CAAC,EAAE;MACPjB,EAAE,GAAG,CAAC;IACR,CAAC,MAAM;MACLiB,EAAE,IAAIA,EAAE;MACRjB,EAAE,GAAGiB,EAAE,GAAGA,EAAE,GAAGH,GAAG,CAAClC,IAAI,CAAC8B,EAAE,EAAEC,EAAE,EAAEiB,EAAE,CAAC;IACrC;IACA,IAAIK,EAAE,GAAG,GAAG,GAAGJ,EAAE,GAACA,EAAE,GAACC,EAAE,GAACA,EAAE,GAACC,EAAE,GAACA,EAAE;IAChC,IAAGE,EAAE,GAAC,CAAC,EAAE;MACPb,EAAE,GAAG,CAAC;IACR,CAAC,MAAM;MACLa,EAAE,IAAIA,EAAE;MACRb,EAAE,GAAGa,EAAE,GAAGA,EAAE,GAAGD,GAAG,CAACpD,IAAI,CAACiD,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;IACrC;IACA;IACA;IACA,OAAO,EAAE,IAAIjC,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGoB,EAAE,CAAC;EAEjC,CAAC;;EAED;;EAEA,SAASc,IAAIA,CAAC/B,CAAC,EAAE;IACf,OAAOA,CAAC,GAACA,CAAC,GAACA,CAAC,IAAEA,CAAC,IAAEA,CAAC,GAAC,CAAC,GAAC,EAAE,CAAC,GAAC,EAAE,CAAC;EAC9B;EAEA,SAASgC,IAAIA,CAACC,CAAC,EAAEC,CAAC,EAAElC,CAAC,EAAE;IACrB,OAAO,CAAC,CAAC,GAACA,CAAC,IAAEiC,CAAC,GAAGjC,CAAC,GAACkC,CAAC;EACtB;;EAEA;EACAjE,KAAK,CAACM,SAAS,CAAC4D,OAAO,GAAG,UAAS/D,CAAC,EAAEC,CAAC,EAAE;IACvC;IACA,IAAI+D,CAAC,GAAGrD,IAAI,CAACC,KAAK,CAACZ,CAAC,CAAC;MAAEiE,CAAC,GAAGtD,IAAI,CAACC,KAAK,CAACX,CAAC,CAAC;IACxC;IACAD,CAAC,GAAGA,CAAC,GAAGgE,CAAC;IAAE/D,CAAC,GAAGA,CAAC,GAAGgE,CAAC;IACpB;IACAD,CAAC,GAAGA,CAAC,GAAG,GAAG;IAAEC,CAAC,GAAGA,CAAC,GAAG,GAAG;;IAExB;IACA,IAAIzD,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAIE,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAIwD,GAAG,GAAGxD,KAAK,CAACsD,CAAC,GAACxD,IAAI,CAACyD,CAAC,CAAC,CAAC,CAAC7D,IAAI,CAACJ,CAAC,EAAEC,CAAC,CAAC;IACrC,IAAIkE,GAAG,GAAGzD,KAAK,CAACsD,CAAC,GAACxD,IAAI,CAACyD,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC7D,IAAI,CAACJ,CAAC,EAAEC,CAAC,GAAC,CAAC,CAAC;IACzC,IAAImE,GAAG,GAAG1D,KAAK,CAACsD,CAAC,GAAC,CAAC,GAACxD,IAAI,CAACyD,CAAC,CAAC,CAAC,CAAC7D,IAAI,CAACJ,CAAC,GAAC,CAAC,EAAEC,CAAC,CAAC;IACzC,IAAIoE,GAAG,GAAG3D,KAAK,CAACsD,CAAC,GAAC,CAAC,GAACxD,IAAI,CAACyD,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC7D,IAAI,CAACJ,CAAC,GAAC,CAAC,EAAEC,CAAC,GAAC,CAAC,CAAC;;IAE7C;IACA,IAAIqE,CAAC,GAAGX,IAAI,CAAC3D,CAAC,CAAC;;IAEf;IACA,OAAO4D,IAAI,CACPA,IAAI,CAACM,GAAG,EAAEE,GAAG,EAAEE,CAAC,CAAC,EACjBV,IAAI,CAACO,GAAG,EAAEE,GAAG,EAAEC,CAAC,CAAC,EAClBX,IAAI,CAAC1D,CAAC,CAAC,CAAC;EACb,CAAC;;EAED;EACAJ,KAAK,CAACM,SAAS,CAACoE,OAAO,GAAG,UAASvE,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAC1C;IACA,IAAI8D,CAAC,GAAGrD,IAAI,CAACC,KAAK,CAACZ,CAAC,CAAC;MAAEiE,CAAC,GAAGtD,IAAI,CAACC,KAAK,CAACX,CAAC,CAAC;MAAEuE,CAAC,GAAG7D,IAAI,CAACC,KAAK,CAACV,CAAC,CAAC;IAC3D;IACAF,CAAC,GAAGA,CAAC,GAAGgE,CAAC;IAAE/D,CAAC,GAAGA,CAAC,GAAGgE,CAAC;IAAE/D,CAAC,GAAGA,CAAC,GAAGsE,CAAC;IAC/B;IACAR,CAAC,GAAGA,CAAC,GAAG,GAAG;IAAEC,CAAC,GAAGA,CAAC,GAAG,GAAG;IAAEO,CAAC,GAAGA,CAAC,GAAG,GAAG;;IAErC;IACA,IAAIhE,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAIE,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAI+D,IAAI,GAAG/D,KAAK,CAACsD,CAAC,GAAGxD,IAAI,CAACyD,CAAC,GAAGzD,IAAI,CAACgE,CAAC,CAAG,CAAC,CAAC,CAACnE,IAAI,CAACL,CAAC,EAAIC,CAAC,EAAMC,CAAC,CAAC;IAC7D,IAAIwE,IAAI,GAAGhE,KAAK,CAACsD,CAAC,GAAGxD,IAAI,CAACyD,CAAC,GAAGzD,IAAI,CAACgE,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAACnE,IAAI,CAACL,CAAC,EAAIC,CAAC,EAAIC,CAAC,GAAC,CAAC,CAAC;IAC7D,IAAIyE,IAAI,GAAGjE,KAAK,CAACsD,CAAC,GAAGxD,IAAI,CAACyD,CAAC,GAAC,CAAC,GAACzD,IAAI,CAACgE,CAAC,CAAG,CAAC,CAAC,CAACnE,IAAI,CAACL,CAAC,EAAIC,CAAC,GAAC,CAAC,EAAIC,CAAC,CAAC;IAC7D,IAAI0E,IAAI,GAAGlE,KAAK,CAACsD,CAAC,GAAGxD,IAAI,CAACyD,CAAC,GAAC,CAAC,GAACzD,IAAI,CAACgE,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAACnE,IAAI,CAACL,CAAC,EAAIC,CAAC,GAAC,CAAC,EAAEC,CAAC,GAAC,CAAC,CAAC;IAC7D,IAAI2E,IAAI,GAAGnE,KAAK,CAACsD,CAAC,GAAC,CAAC,GAACxD,IAAI,CAACyD,CAAC,GAAGzD,IAAI,CAACgE,CAAC,CAAG,CAAC,CAAC,CAACnE,IAAI,CAACL,CAAC,GAAC,CAAC,EAAIC,CAAC,EAAIC,CAAC,CAAC;IAC7D,IAAI4E,IAAI,GAAGpE,KAAK,CAACsD,CAAC,GAAC,CAAC,GAACxD,IAAI,CAACyD,CAAC,GAAGzD,IAAI,CAACgE,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAACnE,IAAI,CAACL,CAAC,GAAC,CAAC,EAAIC,CAAC,EAAEC,CAAC,GAAC,CAAC,CAAC;IAC7D,IAAI6E,IAAI,GAAGrE,KAAK,CAACsD,CAAC,GAAC,CAAC,GAACxD,IAAI,CAACyD,CAAC,GAAC,CAAC,GAACzD,IAAI,CAACgE,CAAC,CAAG,CAAC,CAAC,CAACnE,IAAI,CAACL,CAAC,GAAC,CAAC,EAAEC,CAAC,GAAC,CAAC,EAAIC,CAAC,CAAC;IAC7D,IAAI8E,IAAI,GAAGtE,KAAK,CAACsD,CAAC,GAAC,CAAC,GAACxD,IAAI,CAACyD,CAAC,GAAC,CAAC,GAACzD,IAAI,CAACgE,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAACnE,IAAI,CAACL,CAAC,GAAC,CAAC,EAAEC,CAAC,GAAC,CAAC,EAAEC,CAAC,GAAC,CAAC,CAAC;;IAE7D;IACA,IAAIoE,CAAC,GAAGX,IAAI,CAAC3D,CAAC,CAAC;IACf,IAAIc,CAAC,GAAG6C,IAAI,CAAC1D,CAAC,CAAC;IACf,IAAIgF,CAAC,GAAGtB,IAAI,CAACzD,CAAC,CAAC;;IAEf;IACA,OAAO0D,IAAI,CACPA,IAAI,CACFA,IAAI,CAACa,IAAI,EAAEI,IAAI,EAAEP,CAAC,CAAC,EACnBV,IAAI,CAACc,IAAI,EAAEI,IAAI,EAAER,CAAC,CAAC,EAAEW,CAAC,CAAC,EACzBrB,IAAI,CACFA,IAAI,CAACe,IAAI,EAAEI,IAAI,EAAET,CAAC,CAAC,EACnBV,IAAI,CAACgB,IAAI,EAAEI,IAAI,EAAEV,CAAC,CAAC,EAAEW,CAAC,CAAC,EAC1BnE,CAAC,CAAC;EACP,CAAC;EAEDlB,MAAM,CAACC,KAAK,GAAGA,KAAK;AAEtB,CAAC,EAAE,OAAOqF,MAAM,KAAK,WAAW,GAAG,IAAI,GAAGA,MAAM,CAACC,OAAO,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}